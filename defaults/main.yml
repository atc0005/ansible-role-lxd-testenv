---

# vim: ts=2:sw=2:et:ft=yaml
# -*- mode: yaml; indent-tabs-mode: nil; tab-width: 2 -*-
# code: language=yaml insertSpaces=true tabSize=2

# https://github.com/atc0005/ansible-playbook-lxd-testenv
# https://github.com/atc0005/ansible-role-lxd-testenv

# Flag which controls whether LXD profiles are created during setup process
lxd_host_create_profiles: true

# Flag which controls whether LXD profiles are removed during teardown
lxd_host_remove_profiles: false

# Host copy of file. Updated to reflect host keys of all containers.
lxd_host_ssh_user_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"
lxd_host_ssh_system_known_hosts_file: "/etc/ssh/known_hosts"

# Host copy of file. Updated to reflect names of all containers.
lxd_host_ssh_client_user_config_file: "{{ lookup('env','HOME') + '/.ssh/config' }}"
lxd_host_ssh_client_system_config_file: "/etc/ssh/ssh_config"

# Abstraction is probably not needed, but just in case ...
lxd_host_etc_hosts_file: "/etc/hosts"

# Update the $HOME/.ssh/config file for the user currently running Ansible
# playbook.
lxd_host_update_ssh_client_user_config_file: false

# Update the /etc/ssh/config file on the host.
lxd_host_update_ssh_client_system_config_file: true

# Update the $HOME/.ssh/known_hosts file on the host with host keys from all
# containers.
lxd_host_update_user_known_hosts_file: false

# Update the /etc/ssh/known_hosts file on the host with host keys from all
# containers.
lxd_host_update_system_known_hosts_file: false

# Flag used to control whether the `/etc/hosts` file on the LXD container host
# is updated to include new container name/IP pairs
lxd_host_update_etc_hosts_file: true

# Keys specific/dedicated to this role

lxd_host_ssh_private_key_for_containers: "{{ lookup('env','HOME') + '/.ssh/id_ed25519' }}"
lxd_host_ssh_public_key_for_containers: "{{ lxd_host_ssh_private_key_for_containers + '.pub' }}"

# by default this role serves as a setup tool, but this can be
# overridden to tear down the test environment
lxd_host_remove_container_settings: false
lxd_host_remove_containers: false

# Testing shows that the lxd_container module does not need to have the
# containers stopped before they are removed.
lxd_host_stop_containers_before_removal: false

# Abstraction is probably not needed, but just in case ...
lxd_containers_etc_hosts_file: "/etc/hosts"

# Abstraction is probably not needed, but just in case ...
lxd_containers_environment_file: "/etc/environment"

# Should the /etc/hosts file on each container be updated to list all other
# containers? If this is not enabled, then built-in dnsmasq support will be
# used to provide name resolution between containers.
lxd_containers_update_hosts_file: false

# Proxy server that can be used to speed up package installation within
# containers IMPORTANT: Make sure to provide the full URI scheme. If not set
# (or set empty), empty environment variables will be defined and as a result
# no  proxy server will be used.
# https://askubuntu.com/questions/228530/updating-http-proxy-environment-variable
# https://lxd.readthedocs.io/en/latest/environment/
# lxd_containers_proxy_server: "http://proxy.example.com:3128/"
lxd_containers_proxy_server: ""

# Should the /etc/environment file be updated to set proxy server settings?
# Note: This is safe to enable, even if the default value in this variables
# file is an empty string as the user may opt to set it at the playbook level.
lxd_containers_add_proxy_to_etc_environment_file: true

# Default value provided by module documentation
lxd_containers_create_timeout: "600"

lxd_containers_source_type: "image"
lxd_containers_source_mode: "pull"

# Provides unofficial non-Ubuntu images as well as current Ubuntu images
# Common options include 'https://images.linuxcontainers.org' for unofficial
# images (where aliases are provided which point to current, maintained
# images) and 'https://cloud-images.ubuntu.com/releases' which is used to pull
# official images, including older archived images that are useful for upgrade
# testing
lxd_containers_source_server: "https://images.linuxcontainers.org"

# Use appropriate value shown from 'lxc remote list'
# Supported options: 'lxd' and 'simplestreams'
# Note: 'simplestreams' appears to be a safe default value
lxd_containers_source_protocol: "simplestreams"

# Defines an image using a "friendly" name or alias. Unless overridden,
# defaults to latest stable Ubuntu 16.04 LTS AMD64 image
# See https://images.linuxcontainers.org/ for supported options
# Specify using 'distribution/release/architecture' format
lxd_containers_source_alias: "ubuntu/xenial/amd64"

# You must choose only one: alias or fingerprint.
#
# If using an image fingerprint, you should also override
# lxd_containers_source_server (at a minimum) to provide the appropriate image
# server URL. You may also need to override lxd_containers_source_protocol
# if the default protocol value is not the same as is used for that remote.
#
# Example:
#
# lxd_containers_source_fingerprint: "e9a8bdfab6dc"
# lxd_containers_source_server: "https://cloud-images.ubuntu.com/releases"
# This provides an Ubuntu 14.04 LTS amd64 image from 20150814.
lxd_containers_source_fingerprint: ""

# Force task to wait for containers to receive IPv4 addresses before
# continuing with the rest of the setup work
lxd_containers_wait_for_ipv4_addresses: true

# Assume that containers should be created when this role is used
# unless overridden
lxd_containers_create: true

# Flag that controls whether Python, sudo and other REQUIRED packages are
# installed as part of preparing new containers for management by Ansible.
lxd_containers_bootstrap: true

# Create service account, groups, enable SSH at boot, install extra packages
# and perform other additional tasks that further alter the state of
# containers beyond what the bootstrap phase (controlled via
# 'lxd_containers_bootstrap') already handles
lxd_containers_configure: true

# Number of package installation retry attempts
lxd_containers_package_installation_retry_attempts: "5"

# Number of seconds between retry attempts
lxd_containers_package_installation_retry_delay: "5"

# Essential packages installed in each container as part of the bootstrap
# phase. Controlled via the 'lxd_containers_bootstrap' flag.
lxd_containers_packages_required:
  - "openssh-server"
  - "sudo"

# Non-essential packages installed in each container as part of the
# configuration phase. Controlled via the 'lxd_containers_configure' flag.
lxd_containers_packages_extra:
  # mainly a placeholder, but useful on its own
  - "nano"

# All profiles listed here will be applied to newly created containers
lxd_containers_profiles:
  - "default"

# https://docs.docker.com/config/daemon/
lxd_containers_docker_main_config_file: "/etc/docker/daemon.json"
lxd_containers_docker_config_file_template: "docker-daemon-config.json.j2"

# See Docker storage drivers for valid options, BUT know that some may not
# work within a LXD/LXD environment. The default value chosen here is 'vfs' in
# order to provide the broadest compatibility with backing storage filesystems,
# but this default option should be overridden by the role user if performance
# is found to not be sufficient. Aside from 'vfs', the 'overlay' Docker storage
# driver has been found to be compatible, provided that:
#
# * you are not using ZFS as the the LXD storage option
# * if using docker-ce 18.09.1~3-0~ubuntu-xenial and LXD 3.0.3 the overlay
#   kernel module is loaded by the LXD container profile
#
# AFAIK, no special changes are needed to use the 'overlay' Docker storage
# driver with docker-ce 18.09.1~3-0~ubuntu-xenial and LXD LTS 2.0.x provided
# with Ubuntu 16.04.
# https://github.com/lxc/lxd/issues/2305
# https://docs.docker.com/storage/storagedriver/select-storage-driver/
lxd_containers_docker_storage_driver: "vfs"

lxd_containers_sudoers_include_file: "/etc/sudoers.d/ansible"
lxd_containers_service_account: "ansible"
lxd_containers_service_group: "ansible"

# Default state is setting up a test environment
state: "create"

lxd_containers_default_python_install_command: "if [ -f /usr/bin/apt-get ]; then apt-get install -y python; fi; if [ -f /usr/bin/yum ]; then yum install -y python; fi"

# Location of Python 2 interpreter; needed for bootstrap testing purposes
lxd_containers_python_path: "/usr/bin/python"

# The service name used to start/stop or enable/disable OpenSSH.
# CentOS 6/7: 'sshd'
# Ubuntu: 'ssh'
lxd_containers_sshd_service_name: "sshd"

...
